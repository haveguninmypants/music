-- Initialize the Geoscanner peripheral.
local geoscanner = peripheral.wrap("right")

if geoscanner then
    -- Define the coordinates of the current chunk.
    local chunkX, chunkZ = math.floor(gps.locate())
    local minY, maxY = -20, 30  -- Set the Y-level range from -20 to 30.

    -- Create a table to store ore information.
    local ores = {}

    -- Initialize progress variables.
    local totalBlocks = (maxY - minY + 1) * 16 * 16
    local scannedBlocks = 0

    -- Initialize time variables.
    local startTime = os.time()
    local timeElapsed = 0

    -- Create a function to update the progression bar.
    local function updateProgress()
        term.clear()
        term.setCursorPos(1, 1)
        local progress = scannedBlocks / totalBlocks
        local barLength = 20
        local progressChars = math.floor(barLength * progress)
        local progressBar = "[" .. string.rep("=", progressChars) .. string.rep(" ", barLength - progressChars) .. "]"
        print("Scanning Progress: " .. progressBar)

        -- Calculate the estimated time needed.
        timeElapsed = os.time() - startTime
        local timeRemaining = timeElapsed / progress / 60
        print("Blocks Scanned: " .. scannedBlocks .. " / " .. totalBlocks)
        print("Estimated Time Remaining: " .. math.floor(timeRemaining) .. " minutes")
    end

    -- Delete the existing "ORES.txt" file if it exists.
    if fs.exists("ORES.txt") then
        fs.delete("ORES.txt")
    end

    -- Create and open the "ORES.txt" file for writing.
    local file = fs.open("ORES.txt", "w")

    -- Iterate through the chunk and scan for ores.
    for y = minY, maxY do
        for x = 1, 16 do
            for z = 1, 16 do
                local blockData = geoscanner.scan(x, y, z)
                scannedBlocks = scannedBlocks + 1
                updateProgress()

                if blockData and blockData.state == "ore" then
                    local oreName = blockData.name
                    local oreCount = blockData.count

                    -- Store ore information in the table.
                    table.insert(ores, {
                        name = oreName,
                        count = oreCount,
                        x = chunkX * 16 + x,
                        y = y,
                        z = chunkZ * 16 + z
                    })

                    -- Write ore information to the file.
                    file.writeLine("Ore: " .. oreName)
                    file.writeLine("Count: " .. oreCount)
                    file.writeLine("Coordinates: X=" .. ore.x .. " Y=" .. ore.y .. " Z=" .. ore.z)
                    file.writeLine("--------")
                end
            end
        end
    end

    -- Close the file.
    file.close()

    -- Clear the progress bar.
    term.clear()
    term.setCursorPos(1, 1)

    print("Scan results saved to 'ORES.txt'")
else
    print("Geoscanner not found.")
end
