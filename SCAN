-- Wrap the Geoscanner peripheral on the right side.
local geoscanner = peripheral.wrap("right")

-- Check if Geoscanner peripheral is found.
if geoscanner then
    -- Define the coordinates of the current chunk.
    local chunkX, chunkZ = math.floor(gps.locate())
    local minY, maxY = -20, 30  -- Set the Y-level range from -20 to 30.

    -- Initialize progress variables.
    local totalBlocks = (maxY - minY + 1) * 16 * 16
    local scannedBlocks = 0

    -- Create a table to store block information.
    local blockCounts = {}

    -- Delete the existing "BLOCKS.txt" file if it exists.
    if fs.exists("BLOCKS.txt") then
        fs.delete("BLOCKS.txt")
    end

    -- Open the "BLOCKS.txt" file for writing.
    local file = fs.open("BLOCKS.txt", "w")

    -- Create a function to update the progression bar and block counts.
    local function updateProgress()
        term.clear()
        term.setCursorPos(1, 1)
        print("Scanning Progress: " .. scannedBlocks .. " / " .. totalBlocks)

        local progress = scannedBlocks / totalBlocks
        local barLength = 20
        local progressChars = math.floor(barLength * progress)
        local progressBar = "[" .. string.rep("=", progressChars) .. string.rep(" ", barLength - progressChars) .. "]"
        print("Progress: " .. progressBar)

        -- Display block counts.
        term.setCursorPos(1, 4)
        print("Block Counts:")
        for blockName, blockCount in pairs(blockCounts) do
            print(blockName .. ": " .. blockCount)
        end

        -- List the top 3 blocks if there are at least 3 types.
        term.setCursorPos(1, 13)
        print("Top Blocks:")
        local sortedBlocks = {}
        for blockName, blockCount in pairs(blockCounts) do
            table.insert(sortedBlocks, {name = blockName, count = blockCount})
        end

        -- Sort by count in descending order.
        table.sort(sortedBlocks, function(a, b)
            return a.count > b.count
        end)

        local numTopBlocks = math.min(#sortedBlocks, 3)  -- Show the top 3 or fewer if there are fewer types.

        for i = 1, numTopBlocks do
            print(sortedBlocks[i].name .. ": " .. sortedBlocks[i].count)
        end
    end

    -- Iterate through the chunk and scan for blocks.
    for y = minY, maxY do
        for x = 1, 16 do
            for z = 1, 16 do
                local blockData = geoscanner.scan(x, y, z)
                scannedBlocks = scannedBlocks + 1

                -- Update progress.
                updateProgress()

                if blockData then
                    local blockName = blockData.name
                    local blockAmount = blockData.count

                    -- Update block counts.
                    if not blockCounts[blockName] then
                        blockCounts[blockName] = 0
                    end
                    blockCounts[blockName] = blockCounts[blockName] + blockAmount

                    -- Write block information to the file.
                    file.writeLine("Block: " .. blockName)
                    file.writeLine("Amount: " .. blockAmount)
                    file.writeLine("Coordinates: X=" .. chunkX * 16 + x .. " Y=" .. y .. " Z=" .. chunkZ * 16 + z)
                    file.writeLine("--------")
                end
            end
        end
    end

    -- Close the file.
    file.close()

    -- Display a completion message.
    term.clear()
    term.setCursorPos(1, 1)
    print("Scan results saved to 'BLOCKS.txt'")
else
    -- Display a message if the Geoscanner is not found.
    print("Geoscanner not found.")
end
